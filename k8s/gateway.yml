---
apiVersion: v1
kind: Namespace
metadata:
  name: gateway
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spring-cloud-gateway
  namespace: gateway
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spring-cloud-gateway
rules:
- apiGroups:
  - "" # "" indicates the core API group
  resources:
  - services
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: gateway-clusterrole-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spring-cloud-gateway
subjects:
- kind: ServiceAccount
  name: spring-cloud-gateway
  namespace: gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-cloud-gateway
  namespace: gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: spring-cloud-gateway
  template:
    metadata:
      labels:
        app: spring-cloud-gateway
    spec:
      serviceAccountName: spring-cloud-gateway
      containers:
      - image: making/kubernetes-spring-cloud-gateway@sha256:c70b368968c11c1e275429cd36e43f455e15b7c168a7493b97ca9849302439f6
        name: spring-cloud-gateway
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_SLEUTH_SAMPLER_RATE
          value: "30"
        - name: SPRING_ZIPKIN_BASE_URL
          value: https://zipkin.dev.ik.am
        - name: SPRING_SLEUTH_WEB_ADDITIONAL_SKIP_PATTERN
          value: "/management.*"
        - name: MANAGEMENT_ENDPOINTS_WEB_BASE_PATH
          value: "/management"
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka.dev.ik.am:17505"
        - name: SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC
          value: "request-log"
        - name: LOGGING_EXCEPTION_CONVERSION_WORD
          value: "\t%replace(%replace(%xEx){'\n','@n@'}){'\t','    '}%nopex"
        - name: LOGGING_PATTERN_CONSOLE
          value: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${logging.pattern.level:%5p}) %clr(${PID: }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %replace(%m){'\n','@n@'}${logging.exception-conversion-word:%wEx}%n"
        # Concourse
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0__ID
          value: concourse
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0__URI
          value: https://ngrok.dev.ik.am:17457
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0__PREDICATES_0__NAME
          value: Host
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0__PREDICATES_0__ARGS_PATTERNS
          value: concourse.ik.am
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0__FILTERS_0__NAME
          value: PreserveHostHeader
        - name: SPRING_CLOUD_GATEWAY_ROUTES_0__FILTERS_1__NAME
          value: RequestLogging
        # Vault
        - name: SPRING_CLOUD_GATEWAY_ROUTES_1__ID
          value: vault
        - name: SPRING_CLOUD_GATEWAY_ROUTES_1__URI
          value: http://10.0.8.4:8200
        - name: SPRING_CLOUD_GATEWAY_ROUTES_1__PREDICATES_0__NAME
          value: Host
        - name: SPRING_CLOUD_GATEWAY_ROUTES_1__PREDICATES_0__ARGS_PATTERNS
          value: vault.dev.bosh.tokyo
        - name: SPRING_CLOUD_GATEWAY_ROUTES_1__FILTERS_0__NAME
          value: PreserveHostHeader
        - name: SPRING_CLOUD_GATEWAY_ROUTES_1__FILTERS_1__NAME
          value: RequestLogging
        resources:
          limits:
            memory: "300Mi"
          requests:
            memory: "300Mi"
        readinessProbe:
          httpGet:
            path: /management/health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 15
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /management/health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
---
kind: Service
apiVersion: v1
metadata:
  name: spring-cloud-gateway
  namespace: gateway
  labels:
    app: spring-cloud-gateway
spec:
  type: NodePort
  selector:
    app: spring-cloud-gateway
  ports:
  - protocol: TCP
    port: 8080
    nodePort: 32765
    name: https
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: spring-cloud-gateway
  namespace: gateway
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: spring-cloud-gateway
